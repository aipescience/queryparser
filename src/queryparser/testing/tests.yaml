
# Each test consists of:
#
# - query string
# - columns, each column in form db.tab.col
# - SQL keywords used in the query
# - SQL functions used in the query
# - display columns in form col_name: db.tab.col 
# - tables accessed by the query
# - schema replacement name

common_tests:
    -
        - SELECT tab.a AS col1 FROM db.tab;
        - ['db.tab.a']
        -
        -
        - ['col1: db.tab.a']
        - ['db.tab']
        -

    -
        - SELECT t.a FROM db.tab1 as t, db.tab2;
        - ['db.tab1.a']
        -
        -
        - ['a: db.tab1.a']
        - ['db.tab1', 'db.tab2']
        -

    -
        - SELECT COUNT(*), a*2, b, 100 FROM db.tab;
        - ['db.tab.a', 'db.tab.b']
        -
        - ['COUNT']
        - ['a: db.tab.a', 'b: db.tab.b']
        - ['db.tab']
        -

    -
        - SELECT (((((((1+2)*3)/4)^5)%6)&7)>>8) FROM db.tab;
        -
        -
        -
        -
        - ['db.tab']
        -

    -
        - SELECT ABS(a),AVG(b) FROM db.tab;
        - ['db.tab.a', 'db.tab.b']
        -
        - ['AVG', 'ABS']
        - ['a: db.tab.a', 'b: db.tab.b']
        - ['db.tab']
        -

    -
        - SELECT AVG(((((b & a) << 1) + 1) / a) ^ 4.5) FROM db.tab;
        - ['db.tab.a', 'db.tab.b']
        -
        - ['AVG']
        -
        - ['db.tab']
        -

    -
        - SELECT A.a,B.* FROM db.tab1 A,db.tab2 AS B LIMIT 10;
        - ['db.tab1.a', 'db.tab2.*']
        - ['limit', '*']
        -
        - ['a: db.tab1.a', '*: db.tab2.*']
        - ['db.tab1', 'db.tab2']
        -

    -
        - SELECT fofid, x, y, z, vx, vy, vz
          FROM MDR1.FOF
          WHERE snapnum=85
          ORDER BY mass DESC
          LIMIT 20
        - ['MDR1.FOF.fofid', 'MDR1.FOF.x', 'MDR1.FOF.y', 'MDR1.FOF.z', 'MDR1.FOF.vx', 'MDR1.FOF.vy', 'MDR1.FOF.vz', 'MDR1.FOF.snapnum', 'MDR1.FOF.mass']
        - ['where', 'order by', 'limit']
        -
        - ['fofid: MDR1.FOF.fofid', 'x: MDR1.FOF.x', 'y: MDR1.FOF.y', 'z: MDR1.FOF.z', 'vx: MDR1.FOF.vx', 'vy: MDR1.FOF.vy', 'vz: MDR1.FOF.vz']
        - ['MDR1.FOF']
        -

    -
        - SELECT article, dealer, price
          FROM world.shop s
          WHERE price=(SELECT MAX(price) FROM universe.shop);
        - ['world.shop.article', 'world.shop.dealer', 'world.shop.price', 'universe.shop.price']
        - ['where']
        - ['MAX']
        - ['article: world.shop.article', 'dealer: world.shop.dealer', 'price: world.shop.price']
        - ['world.shop', 'universe.shop']
        -

    -
        - SELECT dealer, price
          FROM db.shop s1
          WHERE price=(SELECT MAX(s2.price)
                 FROM db.warehouse s2
                 WHERE s1.article = s2.article
                 AND s1.foo = s2.bar);
        - ['db.shop.article', 'db.shop.dealer', 'db.shop.price', 'db.warehouse.price', 'db.warehouse.article', 'db.shop.foo', 'db.warehouse.bar']
        - ['where']
        - ['MAX']
        - ['price: db.shop.price', 'dealer: db.shop.dealer']
        - ['db.shop', 'db.warehouse']
        -

    -
        - SELECT A.*, B.*
          FROM db1.table1 A
          LEFT JOIN db2.table1 B
          ON A.id = B.id;
        - ['db1.table1.*', 'db2.table1.*']
        - ['join', '*']
        -
        - ['*: db1.table1.*', '*: db2.table1.*']
        - ['db1.table1', 'db2.table1']
        -

    -
        - SELECT * FROM mmm.products
          WHERE (price BETWEEN 1.0 AND 2.0)
          AND (quantity BETWEEN 1000 AND 2000);
        - ['mmm.products.*']
        - ['WHERE', '*']
        -
        - ['*: mmm.products.*']
        - ['mmm.products']
        -

    -
        - SELECT t.table_name AS tname, t.description AS tdesc,
                   h.column_name AS hcol,
                   j.column_name AS jcol,
                   k.column_name AS kcol
            FROM tap_schema.tabs AS t
            JOIN (
                SELECT table_name, column_name
                FROM tap_schema.cols
                WHERE ucd='phot.mag;em.IR.H'
            ) AS h USING (table_name)
            JOIN (
                SELECT table_name, column_name
                FROM tap_schema.cols
                WHERE ucd='phot.mag;em.IR.J'
            ) AS j USING (table_name)
            JOIN (
                SELECT table_name, column_name
                FROM tap_schema.cols
                WHERE ucd='phot.mag;em.IR.K'
            ) AS k USING (table_name)
        - ['tap_schema.tabs.table_name', 'tap_schema.tabs.description',
           'tap_schema.cols.table_name', 'tap_schema.cols.column_name',
           'tap_schema.cols.ucd']
        - ['join', 'where']
        -
        - ['tname: tap_schema.tabs.table_name',
         'tdesc: tap_schema.tabs.description',
         'hcol: tap_schema.cols.column_name',
         'jcol: tap_schema.cols.column_name',
         'kcol: tap_schema.cols.column_name']
        - ['tap_schema.tabs', 'tap_schema.cols']
        -

    -
        - SELECT t1.a FROM d.tab t1
        - ['foo.tab.a']
        - 
        -
        - ['a: foo.tab.a'] 
        - ['foo.tab']
        - 
         'd': 'foo'


common_translation_tests:
    -
        - SELECT POINT('icrs', ra, de) FROM db.tab
        - ['db.tab.ra', 'db.tab.de']
        -
        - ['spoint', 'RADIANS']
        -
        -
        -

        
mysql_tests:
    -
        - SELECT `fi@1`, fi2
          FROM db.test_table WHERE foo = '1'
          UNION
          SELECT fi1, fi2
          FROM bd.test_table WHERE bar = '1';
        - ['db.test_table.fi@1', 'db.test_table.fi2', 'bd.test_table.fi1',
           'bd.test_table.fi2', 'db.test_table.foo', 'bd.test_table.bar']
        - ['where', 'union']
        -
        - ['fi@1: db.test_table.fi@1', 'fi2: db.test_table.fi2']
        - ['db.test_table', 'bd.test_table']
        -

    -
        - SELECT t1.a, t2.b, t3.c, t4.z
          FROM d.tab t1, `db2`.`tab` t2, foo.tab t3, x.y t4
        - ['foo.tab.a', 'bar.tab.b', 'bas.tab.c', 'x.y.z']
        - 
        -
        - ['a: foo.tab.a', 'b: bar.tab.b', 'c: bas.tab.c', 'z: x.y.z']
        - ['foo.tab', 'bas.tab', 'bar.tab', 'x.y']
        - 
         'd': 'foo'
         'db2': 'bar'
         'foo': 'bas'


postgresql_tests:
    -
        - SELECT ra, dec FROM gdr1.gaia_source
          WHERE pos @ scircle(spoint(1.44, 0.23), 0.01)
        - ['gdr1.gaia_source.ra', 'gdr1.gaia_source.dec',
           'gdr1.gaia_source.pos']
        - ['where']
        - ['scircle', 'spoint']
        - ['ra: gdr1.gaia_source.ra', 'dec: gdr1.gaia_source.dec']
        - ['gdr1.gaia_source']
        -

    -
        -   SELECT ra, dec FROM gdr1.gaia_source
            WHERE pos @ scircle(spoint(1.44, 0.23), 0.01)
        - ['gdr1.gaia_source.ra', 'gdr1.gaia_source.dec',
           'gdr1.gaia_source.pos']
        - ['where']
        - ['scircle', 'spoint']
        - ['ra: gdr1.gaia_source.ra', 'dec: gdr1.gaia_source.dec']
        - ['gdr1.gaia_source']
        -

    -
        - SELECT * FROM gdr2.vari_cepheid AS v
          JOIN gdr2.gaia_source AS g USING(source_id)
          WHERE g.pos @ scircle(spoint(4.2917, -0.4629), 0.008) 
        - ['gdr2.gaia_source.pos', 'gdr2.gaia_source.source_id',
             'gdr2.vari_cepheid.*']
        - ['where', 'join', '*']
        - ['scircle', 'spoint']
        - ['*: gdr2.vari_cepheid.*']
        - ['gdr2.gaia_source', 'gdr2.vari_cepheid']
        -

    -
        - SELECT curves.observation_time,
                 mod(curves.observation_time - rrlyrae.epoch_g, rrlyrae.p1),
                 rrlyrae.p1 AS phase,
                 curves.g_magnitude,
                 2.5 / log(10) * curves.g_flux_error / curves.g_flux
                 AS g_magnitude_error
          FROM gdr1.phot_variable_time_series_gfov AS curves
          INNER JOIN gdr1.rrlyrae AS rrlyrae
          ON rrlyrae.source_id = curves.source_id
          WHERE rrlyrae.source_id = 5284240582308398080 
          AND pos @ sbox(spoint(1.44, 0.23), spoint(1.5, 0.3))
        - ['gdr1.phot_variable_time_series_gfov.g_flux',
           'gdr1.phot_variable_time_series_gfov.g_flux_error',
           'gdr1.phot_variable_time_series_gfov.g_magnitude',
           'gdr1.phot_variable_time_series_gfov.observation_time',
           'gdr1.phot_variable_time_series_gfov.pos',
           'gdr1.phot_variable_time_series_gfov.source_id',
           'gdr1.rrlyrae.epoch_g',
           'gdr1.rrlyrae.p1',
           'gdr1.rrlyrae.source_id']
        - ['where', 'join']
        - ['sbox', 'spoint', 'mod', 'log']
        - ['g_magnitude: gdr1.phot_variable_time_series_gfov.g_magnitude',
           'observation_time: gdr1.phot_variable_time_series_gfov.observation_time',
           'phase: gdr1.rrlyrae.p1']
        - ['gdr1.phot_variable_time_series_gfov', 'gdr1.rrlyrae']
        -


adql_mysql_tests:
    -
        - SELECT POINT('icrs', 10, 10) AS "p" FROM "db".tab
        - SELECT spoint(RADIANS(10.0), RADIANS(10.0)) AS `p` FROM `db`.`tab`;


adql_postgresql_tests:
    -
        - SELECT POINT('icrs', 10, 10) AS "p" FROM "db".tab
        - SELECT spoint(RADIANS(10.0), RADIANS(10.0)) AS "p" FROM "db".tab;


common_syntax_tests:
    - SELECR a FROM db.tab;


common_query_tests:
    - SELECT a FROM db.tab1, db.tab2;
    - SELECT a.b, a.c
      FROM (
          SELECT ra, dec
          FROM db.tab
      ) AS sub
    - SELECT a FROM db.tab
      JOIN (
          SELECT a FROM db.foo
      ) AS sub USING(a)
      JOIN (
          SELECT a FROM db.bar
      ) AS sub USING(a)
    - SELECT b
      FROM (
          SELECT a FROM db.tab
      ) AS sub
    - SELECT sub.b
      FROM (
          SELECT a FROM db.tab
      ) AS sub
    - SELECT a FROM tab
    - SELECT a, b FROM db.tab1
      JOIN (
          SELECT id, col AS b FROM db.tab2
      ) AS sub USING(id)
